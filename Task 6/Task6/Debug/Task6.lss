
Task6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ae  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f1  00000000  00000000  0000089e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000234  00000000  00000000  00000e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  000010c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002de  00000000  00000000  00001150  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000021  00000000  00000000  0000142e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000144f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 57 00 	call	0xae	; 0xae <main>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <BUTTON_init>:
#include "BUTTON.h"
#include "registers.h"


void BUTTON_init(void){
	PORTC_DIR=0x00;		//PC0 is input
  6c:	14 ba       	out	0x14, r1	; 20
	PORTC_DATA=0x01; //PC internal pull-up is activated
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	85 bb       	out	0x15, r24	; 21
  72:	08 95       	ret

00000074 <BUTTON_read>:
}
unsigned char BUTTON_read(unsigned char pinC){
	return PORTC_STATUS &(1<<pinC);		//read the status register of a specific pin for port C
  74:	43 b3       	in	r20, 0x13	; 19
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	30 e0       	ldi	r19, 0x00	; 0
  7a:	b9 01       	movw	r22, r18
  7c:	02 c0       	rjmp	.+4      	; 0x82 <BUTTON_read+0xe>
  7e:	66 0f       	add	r22, r22
  80:	77 1f       	adc	r23, r23
  82:	8a 95       	dec	r24
  84:	e2 f7       	brpl	.-8      	; 0x7e <BUTTON_read+0xa>
  86:	cb 01       	movw	r24, r22
}
  88:	84 23       	and	r24, r20
  8a:	08 95       	ret

0000008c <BUTTON_toggle>:

void BUTTON_toggle(void){
	if(BUTTON_read(0) !=0)	//if the button is pushed turn off the led
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	0e 94 3a 00 	call	0x74	; 0x74 <BUTTON_read>
  92:	81 11       	cpse	r24, r1
	PORTA_DATA = 0x00;
  94:	1b ba       	out	0x1b, r1	; 27
	if(BUTTON_read(0) !=1)	//if the button is pulled turn on the led
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 3a 00 	call	0x74	; 0x74 <BUTTON_read>
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	11 f0       	breq	.+4      	; 0xa4 <BUTTON_toggle+0x18>
	PORTA_DATA = 0x01;
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	8b bb       	out	0x1b, r24	; 27
  a4:	08 95       	ret

000000a6 <LED_init>:
#include "registers.h"
#include "LED.h"


void LED_init(void){
	PORTA_DIR=0x01;		//PA0 is output
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	8a bb       	out	0x1a, r24	; 26
	PORTA_DATA =0x01;	//PA0 data register is initialized with 1
  aa:	8b bb       	out	0x1b, r24	; 27
  ac:	08 95       	ret

000000ae <main>:
#include "registers.h"


int main(void)
{	//initialize PA0 as output for led with initial value high
	LED_init();
  ae:	0e 94 53 00 	call	0xa6	; 0xa6 <LED_init>
	//initialize PC0 (for button)
	BUTTON_init();
  b2:	0e 94 36 00 	call	0x6c	; 0x6c <BUTTON_init>
    while (1) 
    {
		BUTTON_toggle();		//Check status register of PC0 
  b6:	0e 94 46 00 	call	0x8c	; 0x8c <BUTTON_toggle>
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <main+0x8>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
